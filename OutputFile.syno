/*  				<comment_op>
Syno Language			<multiLine_Comment>
*/ 				<comment_op>
-* 				<comment_op>
Fibonacci Series			<singleLine_Comment>
BOOLEAN 			<reserved_word>
cA4heck				<id>
;				<delimBracket>
INT 				<reserved_word>
num				<id>
= 				<assign_Op>
0				<intLiteral>
;				<delimBracket>
FLOAT 				<reserved_word>
averageNum			<id>
;				<delimBracket>
CHAR 				<reserved_word>
name				<id>
=				<assign_operator>
'				<delimBracket>
a				<charLiteral>
'				<delimBracket>
;				<delimBracket>
STRING 				<reserved_word>
last_Name			<id>
=				<assign_operator>
"				<delimBracket>
Jay				<stringLiteral>
"				<delimBracket>
;				<delimBracket>
FLOAT 				<reserved_word>
ave				<id>
=				<assign_operator>
90.56				<floatLiteral>
;				<delimBracket>
INT 				<reserved_word>
MAIN				<keyword>
(				<delimBracket>
STRING 				<reserved_word>
args				<id>
)				<delimBracket>
{				<delimBracket>
Asasas				<invalid>
DISPLAY				<reserved_word>
(				<delimBracket>
"				<delimBracket>
Enter a number			<stringLiteral>
"				<delimBracket>
)				<delimBracket>
;				<delimBracket>
SCAN				<reserved_word>
(				<delimBracket>
"				<delimBracket>
%d				<stringLiteral>
"				<delimBracket>
, 				<commaSeparator>
&				<address_operator>
num				<id>
)				<delimBracket>
;				<delimBracket>
fibonacci				<id>
(				<delimBracket>
n				<id>
)				<delimBracket>
;				<delimBracket>
METHOD 			<keyword>
fibonacci				<id>
(				<delimBracket>
INT 				<reserved_word>
numAnswer24			<id>
)				<delimBracket>
{				<delimBracket>
GIVEN				<reserved_word>
(				<delimBracket>
a				<id>
==				<relational_operator>
ans				<id>
)				<delimBracket>
{				<delimBracket>
b				<id>
=				<assign_operator>
c				<id>
*				<arith_operator> 
d				<id>
;				<delimBracket>	
e				<id>
=				<assign_operator>
f				<id>
/				<arith_operator>
g				<id>
;				<delimBracket>
h				<id>
=				<assign_operator>
a				<id>
-				<arith_operator>t
7				<intLiteral>
;				<delimBracket>
i				<id>
=				<assign_operator>
1				<intLiteral>
;				<delimBracket>
m				<id>
+				<arith_operator>
6				<intLiteral>
;				<delimBracket>
}				<delimBracket>
OR GIVEN			<reserved_word>
(				<delimBracket>
bonus				<id>
!=				<relational_operator>
name				<id>
)				<delimBracket>
{				<delimBracket>
m				<id>
--				<arith_operator>
;				<delimBracket>
o				<id>
++				<arith_operator>
;				<delimBracket>
}				<delimBracket>
OTHERWISE 			<reserved_word>
{				<delimBracket>
RESPOND TO			<noise_word>		
;				<delimBracket>
}				<delimBracket>
RESPOND 			<keyword>
like				<id>
;				<delimBracket>
NUM				<invalid>
a				<id>
,				<commaSeparator>
b				<id>
,				<commaSeparator>
c				<id>
;				<delimBracket>
YAS				<invalid> 
yes				<id>
a				<id>
=				<assign_operator>
0				<intLiteral>
;				<delimBracket>
b				<id>
=				<assign_operator>
1				<intLiteral>
;				<delimBracket>
i				<id>
=				<assign_operator>
1				<intLiteral>
;				<delimBracket>
DISPLAY				<reserved_word>
(				<delimBracket>
"				<delimBracket>
%d				<stringLiteral>
"				<delimBracket>
, 				<commaSeparator>
a				<id>
)				<delimBracket>
;				<delimBracket>
}				<delimBracket>
WHILE				<reserved_word>
(				<delimBracket>
i				<id>
<=				<relational_operator>
num				<id>
)				<delimBracket> 
{				<delimBracket>
name				<id>
=				<assign_operator>
"				<delimBracket>
blank spaces			<stringLiteral>
"				<delimBracket>
;				<delimBracket>
blank				<id>
=				<assign_operator>
"				<delimBracket>
44 ';44 dfdf 			<stringLiteral>
"				<delimBracket>
;				<delimBracket>
c				<id>
=				<assign_operator>
a				<id>
+				<arith_operator>
b				<id>
;				<delimBracket>
a				<id>
=				<assign_operator>
b				<id>
;				<delimBracket>
b				<id>
=				<assign_operator>
c				<id>
;				<delimBracket>
exp				<id>
=				<assign_operator>
exp2				<id>
%				<arith_operator>
exp3				<id>
;				<delimBracket>
FIX				<keyword> 
total				<id>
=				<assign_operator> 
0				<intLiteral>
;				<delimBracket>
STRING 				<reserved_word>
name				<id>
;				<delimBracket>
FIX 				<keyword>
sum				<id>
[				<delimBracket>
6				<intLiteral>
]				<delimBracket>
;				<delimBracket>
GIVEN				<reserved_word>
(				<delimBracket>
!				<logical_operator>
(				<delimBracket>
(				<delimBracket>
relop				<id>
>				<relational_operator>
relop				<id>
)				<delimBracket>
||				<relational_operator>
(				<delimBracket>
arith				<id>
<				<relational_operator>
logOp				<id>
)				<delimBracket>
&&				<logical_operator>
(				<delimBracket>
logOp				<id>
>=				<relational_operator>
relop				<id>
)				<delimBracket>
)				<delimBracket>
)				<delimBracket>
{				<delimBracket>
DISPLAY				<reserved_word>
(				<delimBracket>
"				<delimBracket>
Hello World!			<stringLiteral>
"				<delimBracket>
)				<delimBracket>
;				<delimBracket>
DISPLAY				<reserved_word>
(				<delimBracket>
"				<delimBracket>
My name is %s			<stringLiteral>
"				<delimBracket>
,				<commaSeparator>
name				<id>
)				<delimBracket>
;				<delimBracket>
DISPLAY				<reserved_word>
(				<delimBracket>
"				<delimBracket>
Your change is %d			<stringLiteral>
"				<delimBracket>
,				<commaSeparator>
amount				<id>
-				<arith_operator>
cost				<id>
)				<delimBracket>
;				<delimBracket>
a				<id>
^				<arith_operator>
b				<id>
;				<delimBracket>
a 				<id>
DIV				<arith_operator>
9				<stringLiteral>
;				<delimBracket>
}				<delimBracket>
i				<id>
++				<arith_operator>
;				<delimBracket>
}				<delimBracket>
}				<delimBracket>